From 0e627be9d05b93f9e9c3f85a253468963715863a Mon Sep 17 00:00:00 2001
From: Alexander Clouter <aclouter@telemetry.com>
Date: Mon, 24 Aug 2015 23:36:42 +0100
Subject: [PATCH 2/2] initial exclude support for auth-zone

---
 src/network.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 src/option.c  | 14 ++++++++++++--
 2 files changed, 56 insertions(+), 2 deletions(-)

diff --git a/src/network.c b/src/network.c
index 0197dae..a432a2b 100644
--- a/src/network.c
+++ b/src/network.c
@@ -235,6 +235,44 @@ struct iface_param {
   int fd;
 };
 
+#ifdef HAVE_AUTH
+static int exclude_subnet(union mysockaddr *addr, struct auth_zone *zone)
+{
+  int one_zone = 0;
+  struct addrlist *subnet;
+
+  if (!zone) {
+    one_zone = 1;
+    zone = daemon->auth_zones;
+  }
+
+  for (; zone; zone = zone->next)
+    {
+      for (subnet = zone->subnet; subnet; subnet = subnet->next)
+        {
+          if (!(subnet->flags & ADDRLIST_IPV6))
+            {
+              struct in_addr netmask;
+              netmask.s_addr = htonl(0xffffffff << (32 - subnet->prefixlen));
+              if (subnet->flags & ADDRLIST_REVONLY && is_same_net(addr->in.sin_addr, subnet->addr.addr.addr4, netmask))
+                return 1;
+            }
+#ifdef HAVE_IPV6
+            else if (subnet->flags & ADDRLIST_REVONLY && is_same_net6(&addr->in6.sin6_addr, &subnet->addr.addr.addr6, subnet->prefixlen))
+              return 1;
+#endif
+        }
+
+        if (one_zone)
+          break;
+    }
+
+  return 0;
+}
+#else
+static inline int exclude_subnet(struct mysockaddr *addr, void *zone) { return 0; }
+#endif
+
 static int iface_allowed(struct iface_param *param, int if_index, char *label,
 			 union mysockaddr *addr, struct in_addr netmask, int prefixlen, int iface_flags) 
 {
@@ -333,6 +371,8 @@ static int iface_allowed(struct iface_param *param, int if_index, char *label,
 		      al->prefixlen = prefixlen;
 		      al->addr.addr.addr4 = addr->in.sin_addr;
 		      al->flags = 0;
+		      if (exclude_subnet(addr, zone))
+		        al->flags |= ADDRLIST_REVONLY;
 		    }
 		}
 	      
@@ -354,6 +394,8 @@ static int iface_allowed(struct iface_param *param, int if_index, char *label,
 		      al->prefixlen = prefixlen;
 		      al->addr.addr.addr6 = addr->in6.sin6_addr;
 		      al->flags = ADDRLIST_IPV6;
+		      if (exclude_subnet(addr, zone))
+		        al->flags |= ADDRLIST_REVONLY;
 		    }
 		} 
 #endif
@@ -396,6 +438,8 @@ static int iface_allowed(struct iface_param *param, int if_index, char *label,
 		      al->flags |= ADDRLIST_REVONLY;
 		 } 
 #endif
+	       if (exclude_subnet(addr, NULL))
+	         al->flags |= ADDRLIST_REVONLY;
 	      }
 	  }
     }
diff --git a/src/option.c b/src/option.c
index ecc2619..b11f4a3 100644
--- a/src/option.c
+++ b/src/option.c
@@ -456,7 +456,7 @@ static struct {
   { LOPT_RR, ARG_DUP, "<name>,<RR-number>,[<data>]", gettext_noop("Specify arbitrary DNS resource record"), NULL },
   { LOPT_CLVERBIND, OPT_CLEVERBIND, NULL, gettext_noop("Bind to interfaces in use - check for new interfaces"), NULL },
   { LOPT_AUTHSERV, ARG_ONE, "<NS>,<interface>", gettext_noop("Export local names to global DNS"), NULL },
-  { LOPT_AUTHZONE, ARG_DUP, "<domain>,[<subnet>...]", gettext_noop("Domain to export to global DNS"), NULL },
+  { LOPT_AUTHZONE, ARG_DUP, "<domain>,[[exclude:]<subnet>...]", gettext_noop("Domain to export to global DNS"), NULL },
   { LOPT_AUTHTTL, ARG_ONE, "<integer>", gettext_noop("Set TTL for authoritative replies"), NULL },
   { LOPT_AUTHSOA, ARG_ONE, "<serial>[,...]", gettext_noop("Set authoritive zone information"), NULL },
   { LOPT_AUTHSFS, ARG_DUP, "<NS>[,<NS>...]", gettext_noop("Secondary authoritative nameservers for forward domains"), NULL },
@@ -1843,8 +1843,14 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	    int prefixlen = 0;
 	    char *prefix;
 	    struct addrlist *subnet =  NULL;
+	    int exclude_subnet = 0;
 	    struct all_addr addr;
 
+	    if (strncmp(arg, "exclude:", 8) == 0) {
+	      exclude_subnet = 1;
+	      arg += 8;
+	    }
+
 	    comma = split(arg);
 	    prefix = split_chr(arg, '/');
 	    
@@ -1867,6 +1873,8 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 #endif
 	    else 
 	      {
+	        if (exclude_subnet)
+                  ret_err(gen_err);
 		struct auth_name_list *name =  opt_malloc(sizeof(struct auth_name_list));
 		name->name = opt_string_alloc(arg);
 		name->flags = AUTH4 | AUTH6;
@@ -1887,6 +1895,8 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	    
 	    if (subnet)
 	      {
+	        if (exclude_subnet)
+	          subnet->flags |= ADDRLIST_REVONLY;
 		subnet->addr = addr;
 		subnet->next = new->subnet;
 		new->subnet = subnet;
@@ -4479,7 +4489,7 @@ void read_opts(int argc, char **argv, char *compile_opts)
 #ifdef HAVE_GETOPT_LONG
 	  if (!one_opt(option, arg, daemon->namebuff, _("try --help"), 1, 0))
 #else 
-	    if (!one_opt(option, arg, daemon->namebuff, _("try -w"), 1, 0)) 
+	  if (!one_opt(option, arg, daemon->namebuff, _("try -w"), 1, 0)) 
 #endif  
 	    die(_("bad command line options: %s"), daemon->namebuff, EC_BADCONF);
 	}
-- 
2.1.4

