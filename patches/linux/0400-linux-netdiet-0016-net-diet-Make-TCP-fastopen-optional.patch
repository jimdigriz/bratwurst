From 266eeb081069c6b13978cd90f37b29c8509274ab Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Fri, 17 Jan 2014 18:32:34 -0800
Subject: [PATCH 16/27] net, diet: Make TCP fastopen optional

Make TCP fast open a config option. It's not really needed
on small systems. By itself it saves about 3k text,
but the main advantage is that CONFIG_INET doesn't
pull in AES and the crypto subsystem anymore, which
is worth far more savings.

   text    data     bss     dec     hex filename
6954762 1404960  765952 9125674  8b3f2a vmlinux-with-fastopen
6951618 1400608  765952 9118178  8b21e2 vmlinux-wo-fastopen

Signed-off-by: Andi Kleen <ak@linux.intel.com>
---
diff -u -r a/include/linux/tcp.h b/include/linux/tcp.h
--- a/include/linux/tcp.h	2015-08-03 17:30:08.000000000 +0100
+++ b/include/linux/tcp.h	2015-08-15 17:12:59.729284309 +0100
@@ -368,14 +368,15 @@
 	return (struct tcp_timewait_sock *)sk;
 }
 
+extern void tcp_sock_destruct(struct sock *sk);
+
+#ifdef CONFIG_TCP_FASTOPEN
 static inline bool tcp_passive_fastopen(const struct sock *sk)
 {
 	return (sk->sk_state == TCP_SYN_RECV &&
 		tcp_sk(sk)->fastopen_rsk != NULL);
 }
 
-extern void tcp_sock_destruct(struct sock *sk);
-
 static inline int fastopen_init_queue(struct sock *sk, int backlog)
 {
 	struct request_sock_queue *queue =
@@ -395,4 +396,9 @@
 	return 0;
 }
 
+#else
+static inline bool tcp_passive_fastopen(const struct sock *sk) { return false; }
+static inline int fastopen_init_queue(struct sock *sk, int backlog) { return 0; }
+#endif
+
 #endif	/* _LINUX_TCP_H */
diff -u -r a/include/net/request_sock.h b/include/net/request_sock.h
--- a/include/net/request_sock.h	2015-08-03 17:30:08.000000000 +0100
+++ b/include/net/request_sock.h	2015-08-15 17:14:01.553281986 +0100
@@ -195,9 +195,13 @@
 
 void __reqsk_queue_destroy(struct request_sock_queue *queue);
 void reqsk_queue_destroy(struct request_sock_queue *queue);
+#ifdef CONFIG_TCP_FASTOPEN
 void reqsk_fastopen_remove(struct sock *sk, struct request_sock *req,
 			   bool reset);
-
+#else
+static inline void reqsk_fastopen_remove(struct sock *sk, struct request_sock *req,
+			   bool reset) {};
+#endif
 static inline struct request_sock *
 	reqsk_queue_yank_acceptq(struct request_sock_queue *queue)
 {
diff -u -r a/include/net/tcp.h b/include/net/tcp.h
--- a/include/net/tcp.h	2015-08-03 17:30:08.000000000 +0100
+++ b/include/net/tcp.h	2015-08-15 17:15:22.153278958 +0100
@@ -249,7 +249,11 @@
 extern int sysctl_tcp_retries2;
 extern int sysctl_tcp_orphan_retries;
 extern int sysctl_tcp_syncookies;
+#ifdef CONFIG_TCP_FASTOPEN
 extern int sysctl_tcp_fastopen;
+#else
+#define sysctl_tcp_fastopen 0
+#endif
 extern int sysctl_tcp_retrans_collapse;
 extern int sysctl_tcp_stdurg;
 extern int sysctl_tcp_rfc1337;
@@ -1351,7 +1355,12 @@
 	size_t				size;
 	int				copied;	/* queued in tcp_connect() */
 };
+
+#ifdef CONFIG_TCP_FASTOPEN
 void tcp_free_fastopen_req(struct tcp_sock *tp);
+#else
+static inline void tcp_free_fastopen_req(struct tcp_sock *tp) {};
+#endif
 
 extern struct tcp_fastopen_context __rcu *tcp_fastopen_ctx;
 int tcp_fastopen_reset_cipher(void *key, unsigned int len);
diff -u -r a/net/core/request_sock.c b/net/core/request_sock.c
--- a/net/core/request_sock.c	2015-08-03 17:30:08.000000000 +0100
+++ b/net/core/request_sock.c	2015-08-15 17:16:46.901275775 +0100
@@ -117,6 +117,7 @@
 	kvfree(lopt);
 }
 
+#ifdef CONFIG_TCP_FASTOPEN
 /*
  * This function is called to set a Fast Open socket's "fastopen_rsk" field
  * to NULL when a TFO socket no longer needs to access the request_sock.
@@ -204,3 +205,4 @@
 out:
 	spin_unlock_bh(&fastopenq->lock);
 }
+#endif
diff -u -r a/net/ipv4/Kconfig b/net/ipv4/Kconfig
--- a/net/ipv4/Kconfig	2015-08-15 10:06:17.982246060 +0100
+++ b/net/ipv4/Kconfig	2015-08-15 17:17:15.893274686 +0100
@@ -349,6 +349,9 @@
 
 	  To compile this driver as a module, choose M here: the module
 
+config TCP_FASTOPEN
+	bool "Enable TCP fastopen"
+	default y
 
 config INET_AH
 	tristate "IP: AH transformation"
diff -u -r a/net/ipv4/Makefile b/net/ipv4/Makefile
--- a/net/ipv4/Makefile	2015-08-15 10:06:17.922246062 +0100
+++ b/net/ipv4/Makefile	2015-08-15 17:17:34.437273989 +0100
@@ -7,7 +7,7 @@
 	     ip_output.o ip_sockglue.o inet_hashtables.o \
 	     inet_timewait_sock.o inet_connection_sock.o \
 	     tcp.o tcp_input.o tcp_output.o tcp_timer.o tcp_ipv4.o \
-	     tcp_minisocks.o tcp_cong.o tcp_metrics.o tcp_fastopen.o \
+	     tcp_minisocks.o tcp_cong.o tcp_metrics.o \
 	     tcp_offload.o datagram.o raw.o udp.o udplite.o \
 	     udp_offload.o arp.o icmp.o devinet.o af_inet.o igmp.o \
 	     fib_frontend.o fib_semantics.o fib_trie.o \
@@ -55,6 +55,7 @@
 obj-$(CONFIG_TCP_CONG_LP) += tcp_lp.o
 obj-$(CONFIG_TCP_CONG_YEAH) += tcp_yeah.o
 obj-$(CONFIG_TCP_CONG_ILLINOIS) += tcp_illinois.o
+obj-$(CONFIG_TCP_FASTOPEN) += tcp_fastopen.o
 obj-$(CONFIG_MEMCG_KMEM) += tcp_memcontrol.o
 obj-$(CONFIG_NETLABEL) += cipso_ipv4.o
 obj-$(CONFIG_GENEVE) += geneve.o
diff -u -r a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
--- a/net/ipv4/sysctl_net_ipv4.c	2015-08-03 17:30:08.000000000 +0100
+++ b/net/ipv4/sysctl_net_ipv4.c	2015-08-15 17:25:17.449256596 +0100
@@ -200,6 +200,7 @@
 	return ret;
 }
 
+#ifdef CONFIG_TCP_FASTOPEN
 static int proc_tcp_fastopen_key(struct ctl_table *ctl, int write,
 				 void __user *buffer, size_t *lenp,
 				 loff_t *ppos)
@@ -246,6 +247,7 @@
 	kfree(tbl.data);
 	return ret;
 }
+#endif
 
 static struct ctl_table ipv4_table[] = {
 	{
@@ -381,6 +383,7 @@
 		.proc_handler	= proc_dointvec
 	},
 #endif
+#ifdef CONFIG_TCP_FASTOPEN
 	{
 		.procname	= "tcp_fastopen",
 		.data		= &sysctl_tcp_fastopen,
@@ -394,6 +397,7 @@
 		.maxlen		= ((TCP_FASTOPEN_KEY_LENGTH * 2) + 10),
 		.proc_handler	= proc_tcp_fastopen_key,
 	},
+#endif
 	{
 		.procname	= "tcp_tw_recycle",
 		.data		= &tcp_death_row.sysctl_tw_recycle,
diff -u -r a/net/ipv4/tcp.c b/net/ipv4/tcp.c
--- a/net/ipv4/tcp.c	2015-08-03 17:30:08.000000000 +0100
+++ b/net/ipv4/tcp.c	2015-08-15 17:37:26.885229194 +0100
@@ -1030,6 +1030,7 @@
 	return tmp;
 }
 
+#ifdef CONFIG_TCP_FASTOPEN
 void tcp_free_fastopen_req(struct tcp_sock *tp)
 {
 	if (tp->fastopen_req) {
@@ -1063,6 +1064,7 @@
 	tcp_free_fastopen_req(tp);
 	return err;
 }
+#endif
 
 int tcp_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
 {
@@ -1076,6 +1078,7 @@
 	lock_sock(sk);
 
 	flags = msg->msg_flags;
+#ifdef CONFIG_TCP_FASTOPEN
 	if (flags & MSG_FASTOPEN) {
 		err = tcp_sendmsg_fastopen(sk, msg, &copied_syn, size);
 		if (err == -EINPROGRESS && copied_syn > 0)
@@ -1083,6 +1086,7 @@
 		else if (err)
 			goto out_err;
 	}
+#endif
 
 	timeo = sock_sndtimeo(sk, flags & MSG_DONTWAIT);
 
@@ -2543,6 +2547,7 @@
 			icsk->icsk_user_timeout = msecs_to_jiffies(val);
 		break;
 
+#ifdef CONFIG_TCP_FASTOPEN
 	case TCP_FASTOPEN:
 		if (val >= 0 && ((1 << sk->sk_state) & (TCPF_CLOSE |
 		    TCPF_LISTEN))) {
@@ -2553,6 +2558,7 @@
 			err = -EINVAL;
 		}
 		break;
+#endif
 	case TCP_TIMESTAMP:
 		if (!tp->repair)
 			err = -EPERM;
diff -u -r a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
--- a/net/ipv4/tcp_input.c	2015-08-03 17:30:08.000000000 +0100
+++ b/net/ipv4/tcp_input.c	2015-08-15 17:23:23.445260878 +0100
@@ -6188,8 +6188,12 @@
 
 	tcp_rsk(req)->snt_isn = isn;
 	tcp_openreq_init_rwin(req, sk, dst);
+#ifdef CONFIG_TCP_FASTOPEN
 	fastopen = !want_cookie &&
 		   tcp_try_fastopen(sk, skb, req, &foc, dst);
+#else
+	fastopen = false;
+#endif
 	err = af_ops->send_synack(sk, dst, &fl, req,
 				  skb_get_queue_mapping(skb), &foc);
 	if (!fastopen) {
diff -u -r a/net/Kconfig b/net/Kconfig
--- a/net/Kconfig	2015-08-15 10:06:17.982246060 +0100
+++ b/net/Kconfig	2015-08-15 17:15:56.165277681 +0100
@@ -54,8 +54,8 @@
 
 config INET
 	bool "TCP/IP networking"
-	select CRYPTO
-	select CRYPTO_AES
+	select CRYPTO if TCP_FASTOPEN
+	select CRYPTO_AES if TCP_FASTOPEN
 	---help---
 	  These are the protocols used on the Internet and on most local
 	  Ethernets. It is highly recommended to say Y here (this will enlarge
