diff -r -N -u linux-3.18.1.orig/include/net/protocol.h linux-3.18.1/include/net/protocol.h
--- linux-3.18.1.orig/include/net/protocol.h	2014-12-16 17:39:45.000000000 +0000
+++ linux-3.18.1/include/net/protocol.h	2014-12-26 16:06:05.690766094 +0000
@@ -102,8 +102,18 @@
 
 int inet_add_protocol(const struct net_protocol *prot, unsigned char num);
 int inet_del_protocol(const struct net_protocol *prot, unsigned char num);
+#ifdef CONFIG_IP_OFFLOAD
 int inet_add_offload(const struct net_offload *prot, unsigned char num);
 int inet_del_offload(const struct net_offload *prot, unsigned char num);
+#else
+static inline int
+inet_add_offload(const struct net_offload *prot, unsigned char num)
+{ return 0; }
+static inline int
+inet_del_offload(const struct net_offload *prot, unsigned char num)
+{ return 0; }
+#endif
+
 void inet_register_protosw(struct inet_protosw *p);
 void inet_unregister_protosw(struct inet_protosw *p);
 
diff -r -N -u linux-3.18.1.orig/include/net/tcp.h linux-3.18.1/include/net/tcp.h
--- linux-3.18.1.orig/include/net/tcp.h	2014-12-26 16:05:40.670767086 +0000
+++ linux-3.18.1/include/net/tcp.h	2014-12-26 16:06:05.690766094 +0000
@@ -1608,7 +1608,12 @@
 struct sk_buff *tcp_gso_segment(struct sk_buff *skb,
 				netdev_features_t features);
 struct sk_buff **tcp_gro_receive(struct sk_buff **head, struct sk_buff *skb);
+#ifdef CONFIG_IP_OFFLOAD
 int tcp_gro_complete(struct sk_buff *skb);
+#else
+/* For the benefit of one driver who really shouldn't be using this. */
+static inline int tcp_gro_complete(struct sk_buff *skb) { return -EIO; }
+#endif
 
 void __tcp_v4_send_check(struct sk_buff *skb, __be32 saddr, __be32 daddr);
 
diff -r -N -u linux-3.18.1.orig/net/ipv4/af_inet.c linux-3.18.1/net/ipv4/af_inet.c
--- linux-3.18.1.orig/net/ipv4/af_inet.c	2014-12-26 16:05:40.666767086 +0000
+++ linux-3.18.1/net/ipv4/af_inet.c	2014-12-26 16:06:36.930764857 +0000
@@ -1198,6 +1198,9 @@
 }
 EXPORT_SYMBOL(inet_sk_rebuild_header);
 
+#ifdef CONFIG_IP_OFFLOAD
+/* Should move to a new file */
+
 static struct sk_buff *inet_gso_segment(struct sk_buff *skb,
 					netdev_features_t features)
 {
@@ -1387,17 +1390,6 @@
 	return pp;
 }
 
-int inet_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
-{
-	if (sk->sk_family == AF_INET)
-		return ip_recv_error(sk, msg, len, addr_len);
-#if IS_ENABLED(CONFIG_IPV6)
-	if (sk->sk_family == AF_INET6)
-		return pingv6_ops.ipv6_recv_error(sk, msg, len, addr_len);
-#endif
-	return -EINVAL;
-}
-
 static int inet_gro_complete(struct sk_buff *skb, int nhoff)
 {
 	__be16 newlen = htons(skb->len - nhoff);
@@ -1429,6 +1421,19 @@
 	return err;
 }
 
+#endif
+
+int inet_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len)
+{
+	if (sk->sk_family == AF_INET)
+		return ip_recv_error(sk, msg, len, addr_len);
+#if IS_ENABLED(CONFIG_IPV6)
+	if (sk->sk_family == AF_INET6)
+		return pingv6_ops.ipv6_recv_error(sk, msg, len, addr_len);
+#endif
+	return -EINVAL;
+}
+
 int inet_ctl_sock_create(struct sock **sk, unsigned short family,
 			 unsigned short type, unsigned char protocol,
 			 struct net *net)
@@ -1629,6 +1634,9 @@
 
 static int ipv4_proc_init(void);
 
+#ifdef CONFIG_IP_OFFLOAD
+/* Move elsewhere? */
+
 /*
  *	IP protocol layer initialiser
  */
@@ -1666,6 +1674,7 @@
 }
 
 fs_initcall(ipv4_offload_init);
+#endif
 
 static struct packet_type ip_packet_type __read_mostly = {
 	.type = cpu_to_be16(ETH_P_IP),
diff -r -N -u linux-3.18.1.orig/net/ipv4/Kconfig linux-3.18.1/net/ipv4/Kconfig
--- linux-3.18.1.orig/net/ipv4/Kconfig	2014-12-26 16:05:40.670767086 +0000
+++ linux-3.18.1/net/ipv4/Kconfig	2014-12-26 16:06:05.694766094 +0000
@@ -306,6 +306,10 @@
 
 	  If unsure, say N.
 
+config IP_OFFLOAD
+	bool "Support for IP GRO/offload"
+	default y
+
 config NET_IPVTI
 	tristate "Virtual (secure) IP: tunneling"
 	select INET_TUNNEL
diff -r -N -u linux-3.18.1.orig/net/ipv4/Makefile linux-3.18.1/net/ipv4/Makefile
--- linux-3.18.1.orig/net/ipv4/Makefile	2014-12-26 16:05:40.670767086 +0000
+++ linux-3.18.1/net/ipv4/Makefile	2014-12-26 16:06:05.694766094 +0000
@@ -8,8 +8,8 @@
 	     inet_timewait_sock.o inet_connection_sock.o \
 	     tcp.o tcp_input.o tcp_output.o tcp_timer.o tcp_ipv4.o \
 	     tcp_minisocks.o tcp_cong.o tcp_fastopen.o \
-	     tcp_offload.o datagram.o raw.o udp.o udplite.o \
-	     udp_offload.o arp.o icmp.o devinet.o af_inet.o igmp.o \
+	     datagram.o raw.o udp.o udplite.o \
+	     arp.o icmp.o devinet.o af_inet.o igmp.o \
 	     fib_frontend.o fib_semantics.o fib_trie.o \
 	     inet_fragment.o ip_tunnel_core.o gre_offload.o
 
@@ -28,6 +28,7 @@
 obj-$(CONFIG_NET_UDP_TUNNEL) += udp_tunnel.o
 obj-$(CONFIG_NET_IPVTI) += ip_vti.o
 obj-$(CONFIG_SYN_COOKIES) += syncookies.o
+obj-$(CONFIG_IP_OFFLOAD) += tcp_offload.o udp_offload.o
 obj-$(CONFIG_INET_AH) += ah4.o
 obj-$(CONFIG_INET_ESP) += esp4.o
 obj-$(CONFIG_INET_IPCOMP) += ipcomp.o
diff -r -N -u linux-3.18.1.orig/net/ipv4/protocol.c linux-3.18.1/net/ipv4/protocol.c
--- linux-3.18.1.orig/net/ipv4/protocol.c	2014-12-16 17:39:45.000000000 +0000
+++ linux-3.18.1/net/ipv4/protocol.c	2014-12-26 16:06:05.694766094 +0000
@@ -29,8 +29,6 @@
 #include <net/protocol.h>
 
 const struct net_protocol __rcu *inet_protos[MAX_INET_PROTOS] __read_mostly;
-const struct net_offload __rcu *inet_offloads[MAX_INET_PROTOS] __read_mostly;
-EXPORT_SYMBOL(inet_offloads);
 
 int inet_add_protocol(const struct net_protocol *prot, unsigned char protocol)
 {
@@ -45,6 +43,9 @@
 }
 EXPORT_SYMBOL(inet_add_protocol);
 
+#ifdef CONFIG_IP_OFFLOAD
+const struct net_offload __rcu *inet_offloads[MAX_INET_PROTOS] __read_mostly;
+
 int inet_add_offload(const struct net_offload *prot, unsigned char protocol)
 {
 	return !cmpxchg((const struct net_offload **)&inet_offloads[protocol],
@@ -52,6 +53,8 @@
 }
 EXPORT_SYMBOL(inet_add_offload);
 
+#endif
+
 int inet_del_protocol(const struct net_protocol *prot, unsigned char protocol)
 {
 	int ret;
@@ -65,6 +68,7 @@
 }
 EXPORT_SYMBOL(inet_del_protocol);
 
+#ifdef CONFIG_IP_OFFLOAD
 int inet_del_offload(const struct net_offload *prot, unsigned char protocol)
 {
 	int ret;
@@ -77,3 +81,4 @@
 	return ret;
 }
 EXPORT_SYMBOL(inet_del_offload);
+#endif
diff -r -N -u linux-3.18.1.orig/net/ipv6/Makefile linux-3.18.1/net/ipv6/Makefile
--- linux-3.18.1.orig/net/ipv6/Makefile	2014-12-26 16:05:40.670767086 +0000
+++ linux-3.18.1/net/ipv6/Makefile	2014-12-26 16:06:05.694766094 +0000
@@ -10,7 +10,8 @@
 		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o \
 		exthdrs.o datagram.o ip6_flowlabel.o inet6_connection_sock.o
 
-ipv6-offload :=	ip6_offload.o tcpv6_offload.o udp_offload.o exthdrs_offload.o
+ipv6-offload-$(CONFIG_IP_OFFLOAD) := ip6_offload.o tcpv6_offload.o \
+		udp_offload.o exthdrs_offload.o
 
 ipv6-$(CONFIG_SYSCTL) = sysctl_net_ipv6.o
 ipv6-$(CONFIG_IPV6_MROUTE) += ip6mr.o
@@ -43,7 +44,7 @@
 obj-$(CONFIG_IPV6_GRE) += ip6_gre.o
 
 obj-y += addrconf_core.o exthdrs_core.o ip6_checksum.o ip6_icmp.o
-obj-$(CONFIG_INET) += output_core.o protocol.o $(ipv6-offload)
+obj-$(CONFIG_INET) += output_core.o protocol.o $(ipv6-offload-y)
 
 obj-$(subst m,y,$(CONFIG_IPV6)) += inet6_hashtables.o
 
diff -r -N -u linux-3.18.1.orig/net/ipv6/protocol.c linux-3.18.1/net/ipv6/protocol.c
--- linux-3.18.1.orig/net/ipv6/protocol.c	2014-12-16 17:39:45.000000000 +0000
+++ linux-3.18.1/net/ipv6/protocol.c	2014-12-26 16:06:05.694766094 +0000
@@ -50,6 +50,7 @@
 EXPORT_SYMBOL(inet6_del_protocol);
 #endif
 
+#ifdef CONFIG_IP_OFFLOAD
 const struct net_offload __rcu *inet6_offloads[MAX_INET_PROTOS] __read_mostly;
 EXPORT_SYMBOL(inet6_offloads);
 
@@ -72,3 +73,4 @@
 	return ret;
 }
 EXPORT_SYMBOL(inet6_del_offload);
+#endif
