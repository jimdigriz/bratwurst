diff -r -N -u linux-3.18.1.orig/include/net/ip.h linux-3.18.1/include/net/ip.h
--- linux-3.18.1.orig/include/net/ip.h	2014-12-26 14:35:48.202980760 +0000
+++ linux-3.18.1/include/net/ip.h	2014-12-26 14:43:47.622961763 +0000
@@ -475,7 +475,12 @@
 	return 1;
 }
 
+#ifdef CONFIG_INET_RAW
 bool ip_call_ra_chain(struct sk_buff *skb);
+#else
+static inline bool ip_call_ra_chain(struct sk_buff *skb)
+{ return false; }
+#endif
 
 /*
  *	Functions provided by ip_fragment.c
diff -r -N -u linux-3.18.1.orig/include/net/ipv6.h linux-3.18.1/include/net/ipv6.h
--- linux-3.18.1.orig/include/net/ipv6.h	2014-12-26 14:31:49.698990210 +0000
+++ linux-3.18.1/include/net/ipv6.h	2014-12-26 14:43:47.622961763 +0000
@@ -891,8 +891,13 @@
 #ifdef CONFIG_PROC_FS
 int ac6_proc_init(struct net *net);
 void ac6_proc_exit(struct net *net);
+#ifdef CONFIG_INET_RAW
 int raw6_proc_init(void);
 void raw6_proc_exit(void);
+#else
+static inline int raw6_proc_init(void) { return 0; }
+static inline void raw6_proc_exit(void) {}
+#endif
 int tcp6_proc_init(struct net *net);
 void tcp6_proc_exit(struct net *net);
 int udp6_proc_init(struct net *net);
diff -r -N -u linux-3.18.1.orig/include/net/raw.h linux-3.18.1/include/net/raw.h
--- linux-3.18.1.orig/include/net/raw.h	2014-12-26 14:20:33.223017015 +0000
+++ linux-3.18.1/include/net/raw.h	2014-12-26 14:43:47.622961763 +0000
@@ -23,8 +23,17 @@
 
 extern struct proto raw_prot;
 
+#ifdef CONFIG_INET_RAW
 void raw_icmp_error(struct sk_buff *, int, u32);
 int raw_local_deliver(struct sk_buff *, int);
+int raw_proc_init(void);
+void raw_proc_exit(void);
+#else
+static inline void raw_icmp_error(struct sk_buff *skb, int a, u32 b) {}
+static inline int raw_local_deliver(struct sk_buff *skb, int s) { return 0; }
+static inline int raw_proc_init(void) { return 0; }
+static inline void raw_proc_exit(void) {}
+#endif
 
 int raw_rcv(struct sock *, struct sk_buff *);
 
@@ -35,10 +44,6 @@
 	struct hlist_head ht[RAW_HTABLE_SIZE];
 };
 
-#ifdef CONFIG_PROC_FS
-int raw_proc_init(void);
-void raw_proc_exit(void);
-
 struct raw_iter_state {
 	struct seq_net_private p;
 	int bucket;
@@ -55,8 +60,6 @@
 int raw_seq_open(struct inode *ino, struct file *file,
 		 struct raw_hashinfo *h, const struct seq_operations *ops);
 
-#endif
-
 void raw_hash_sk(struct sock *sk);
 void raw_unhash_sk(struct sock *sk);
 
diff -r -N -u linux-3.18.1.orig/include/net/rawv6.h linux-3.18.1/include/net/rawv6.h
--- linux-3.18.1.orig/include/net/rawv6.h	2014-12-26 14:20:33.219017016 +0000
+++ linux-3.18.1/include/net/rawv6.h	2014-12-26 14:43:47.622961763 +0000
@@ -3,9 +3,17 @@
 
 #include <net/protocol.h>
 
+
+#ifdef CONFIG_INET_RAW
 void raw6_icmp_error(struct sk_buff *, int nexthdr,
 		u8 type, u8 code, int inner_offset, __be32);
 bool raw6_local_deliver(struct sk_buff *, int);
+#else
+static inline void raw6_icmp_error(struct sk_buff *skb, int nexthdr,
+		u8 type, u8 code, int inner_offset, __be32 x) {}
+static inline bool raw6_local_deliver(struct sk_buff *skb, int x)
+{ return false; }
+#endif
 
 int rawv6_rcv(struct sock *sk, struct sk_buff *skb);
 
diff -r -N -u linux-3.18.1.orig/include/net/transp_v6.h linux-3.18.1/include/net/transp_v6.h
--- linux-3.18.1.orig/include/net/transp_v6.h	2014-12-26 14:20:33.223017015 +0000
+++ linux-3.18.1/include/net/transp_v6.h	2014-12-26 14:43:47.622961763 +0000
@@ -19,8 +19,13 @@
 void ipv6_frag_exit(void);
 
 /* transport protocols */
+#ifdef CONFIG_INET_RAW
 int rawv6_init(void);
 void rawv6_exit(void);
+#else
+static inline int rawv6_init(void) { return 0; }
+static inline void rawv6_exit(void) {}
+#endif
 int udpv6_init(void);
 void udpv6_exit(void);
 int udplitev6_init(void);
diff -r -N -u linux-3.18.1.orig/net/ipv4/af_inet.c linux-3.18.1/net/ipv4/af_inet.c
--- linux-3.18.1.orig/net/ipv4/af_inet.c	2014-12-26 14:35:14.514982095 +0000
+++ linux-3.18.1/net/ipv4/af_inet.c	2014-12-26 14:43:47.622961763 +0000
@@ -949,6 +949,7 @@
 };
 EXPORT_SYMBOL(inet_dgram_ops);
 
+#ifdef CONFIG_INET_RAW
 /*
  * For SOCK_RAW sockets; should be the same as inet_dgram_ops but without
  * udp_poll
@@ -978,6 +979,7 @@
 	.compat_ioctl	   = inet_compat_ioctl,
 #endif
 };
+#endif
 
 static const struct net_proto_family inet_family_ops = {
 	.family = PF_INET,
@@ -1016,6 +1018,7 @@
        },
 #endif
 
+#ifdef CONFIG_INET_RAW
        {
 	       .type =       SOCK_RAW,
 	       .protocol =   IPPROTO_IP,	/* wild card */
@@ -1023,6 +1026,7 @@
 	       .ops =        &inet_sockraw_ops,
 	       .flags =      INET_PROTOSW_REUSE,
        }
+#endif
 };
 
 #define INETSW_ARRAY_LEN ARRAY_SIZE(inetsw_array)
@@ -1709,9 +1713,11 @@
 	if (rc)
 		goto out_unregister_tcp_proto;
 
+#ifdef CONFIG_INET_RAW
 	rc = proto_register(&raw_prot, 1);
 	if (rc)
 		goto out_unregister_udp_proto;
+#endif
 
 #ifdef CONFIG_IP_PING
 	rc = proto_register(&ping_prot, 1);
@@ -1810,8 +1816,10 @@
 out:
 	return rc;
 out_unregister_raw_proto:
+#ifdef CONFIG_INET_RAW
 	proto_unregister(&raw_prot);
 out_unregister_udp_proto:
+#endif
 	proto_unregister(&udp_prot);
 out_unregister_tcp_proto:
 	proto_unregister(&tcp_prot);
diff -r -N -u linux-3.18.1.orig/net/ipv4/ip_input.c linux-3.18.1/net/ipv4/ip_input.c
--- linux-3.18.1.orig/net/ipv4/ip_input.c	2014-12-26 14:20:32.671017037 +0000
+++ linux-3.18.1/net/ipv4/ip_input.c	2014-12-26 14:43:47.626961763 +0000
@@ -147,6 +147,7 @@
 #include <linux/mroute.h>
 #include <linux/netlink.h>
 
+#ifdef CONFIG_INET_RAW
 /*
  *	Process Router Attention IP option (RFC 2113)
  */
@@ -186,6 +187,7 @@
 	}
 	return false;
 }
+#endif
 
 static int ip_local_deliver_finish(struct sk_buff *skb)
 {
diff -r -N -u linux-3.18.1.orig/net/ipv4/Kconfig linux-3.18.1/net/ipv4/Kconfig
--- linux-3.18.1.orig/net/ipv4/Kconfig	2014-12-26 14:38:18.234974815 +0000
+++ linux-3.18.1/net/ipv4/Kconfig	2014-12-26 14:43:47.622961763 +0000
@@ -62,6 +62,10 @@
 	  Keep track of statistics on structure of FIB TRIE table.
 	  Useful for testing and measuring TRIE performance.
 
+config INET_RAW
+       bool "IP: Support raw sockets"
+       default y
+
 config IP_MULTIPLE_TABLES
 	bool "IP: policy routing"
 	depends on IP_ADVANCED_ROUTER
@@ -218,6 +222,7 @@
 config IP_MROUTE
 	bool "IP: multicast routing"
 	depends on IP_MULTICAST
+	select INET_RAW
 	help
 	  This is used if you want your machine to act as a router for IP
 	  packets that have several destination addresses. It is needed on the
diff -r -N -u linux-3.18.1.orig/net/ipv4/Makefile linux-3.18.1/net/ipv4/Makefile
--- linux-3.18.1.orig/net/ipv4/Makefile	2014-12-26 14:38:18.234974815 +0000
+++ linux-3.18.1/net/ipv4/Makefile	2014-12-26 14:46:31.674955262 +0000
@@ -8,7 +8,7 @@
 	     inet_timewait_sock.o inet_connection_sock.o \
 	     tcp.o tcp_input.o tcp_output.o tcp_timer.o tcp_ipv4.o \
 	     tcp_minisocks.o tcp_cong.o tcp_fastopen.o \
-	     datagram.o raw.o udp.o udplite.o \
+	     datagram.o udp.o udplite.o \
 	     arp.o icmp.o devinet.o af_inet.o \
 	     fib_frontend.o fib_semantics.o fib_trie.o \
 	     inet_fragment.o ip_tunnel_core.o gre_offload.o
@@ -61,6 +61,7 @@
 obj-$(CONFIG_MEMCG_KMEM) += tcp_memcontrol.o
 obj-$(CONFIG_NETLABEL) += cipso_ipv4.o
 obj-$(CONFIG_GENEVE) += geneve.o
+obj-$(CONFIG_INET_RAW) += raw.o
 
 obj-$(CONFIG_XFRM) += xfrm4_policy.o xfrm4_state.o xfrm4_input.o \
 		      xfrm4_output.o xfrm4_protocol.o
diff -r -N -u linux-3.18.1.orig/net/ipv4/proc.c linux-3.18.1/net/ipv4/proc.c
--- linux-3.18.1.orig/net/ipv4/proc.c	2014-12-26 14:20:32.671017037 +0000
+++ linux-3.18.1/net/ipv4/proc.c	2014-12-26 14:46:06.830956247 +0000
@@ -70,8 +70,10 @@
 		   proto_memory_allocated(&udp_prot));
 	seq_printf(seq, "UDPLITE: inuse %d\n",
 		   sock_prot_inuse_get(net, &udplite_prot));
+#ifdef CONFIG_INET_RAW
 	seq_printf(seq, "RAW: inuse %d\n",
 		   sock_prot_inuse_get(net, &raw_prot));
+#endif
 	frag_mem = ip_frag_mem(net);
 	seq_printf(seq,  "FRAG: inuse %u memory %u\n", !!frag_mem, frag_mem);
 	return 0;
diff -r -N -u linux-3.18.1.orig/net/ipv6/af_inet6.c linux-3.18.1/net/ipv6/af_inet6.c
--- linux-3.18.1.orig/net/ipv6/af_inet6.c	2014-12-26 14:43:15.742963026 +0000
+++ linux-3.18.1/net/ipv6/af_inet6.c	2014-12-26 14:43:47.626961763 +0000
@@ -855,9 +855,11 @@
 	if (err)
 		goto out_unregister_udp_proto;
 
+#ifdef CONFIG_INET_RAW
 	err = proto_register(&rawv6_prot, 1);
 	if (err)
 		goto out_unregister_udplite_proto;
+#endif
 
 #ifdef CONFIG_IP_PING
 	err = proto_register(&pingv6_prot, 1);
@@ -1026,8 +1028,10 @@
 	proto_unregister(&pingv6_prot);
 out_unregister_raw_proto:
 #endif
+#ifdef CONFIG_INET_RAW
 	proto_unregister(&rawv6_prot);
 out_unregister_udplite_proto:
+#endif
 	proto_unregister(&udplitev6_prot);
 out_unregister_udp_proto:
 	proto_unregister(&udpv6_prot);
diff -r -N -u linux-3.18.1.orig/net/ipv6/ip6_output.c linux-3.18.1/net/ipv6/ip6_output.c
--- linux-3.18.1.orig/net/ipv6/ip6_output.c	2014-12-26 14:20:32.663017038 +0000
+++ linux-3.18.1/net/ipv6/ip6_output.c	2014-12-26 14:43:47.626961763 +0000
@@ -235,6 +235,7 @@
 }
 EXPORT_SYMBOL(ip6_xmit);
 
+#ifdef CONFIG_INET_RAW
 static int ip6_call_ra_chain(struct sk_buff *skb, int sel)
 {
 	struct ip6_ra_chain *ra;
@@ -263,6 +264,7 @@
 	read_unlock(&ip6_ra_lock);
 	return 0;
 }
+#endif
 
 static int ip6_forward_proxy_check(struct sk_buff *skb)
 {
@@ -398,10 +400,12 @@
 	 *	cannot be fragmented, because there is no warranty
 	 *	that different fragments will go along one path. --ANK
 	 */
+#ifdef CONFIG_INET_RAW
 	if (unlikely(opt->flags & IP6SKB_ROUTERALERT)) {
 		if (ip6_call_ra_chain(skb, ntohs(opt->ra)))
 			return 0;
 	}
+#endif
 
 	/*
 	 *	check and decrement ttl
diff -r -N -u linux-3.18.1.orig/net/ipv6/Kconfig linux-3.18.1/net/ipv6/Kconfig
--- linux-3.18.1.orig/net/ipv6/Kconfig	2014-12-26 14:20:32.663017038 +0000
+++ linux-3.18.1/net/ipv6/Kconfig	2014-12-26 14:43:47.626961763 +0000
@@ -88,6 +88,7 @@
 config IPV6_MIP6
 	tristate "IPv6: Mobility"
 	select XFRM
+	select INET_RAW
 	---help---
 	  Support for IPv6 Mobility described in RFC 3775.
 
diff -r -N -u linux-3.18.1.orig/net/ipv6/Makefile linux-3.18.1/net/ipv6/Makefile
--- linux-3.18.1.orig/net/ipv6/Makefile	2014-12-26 14:26:39.931002485 +0000
+++ linux-3.18.1/net/ipv6/Makefile	2014-12-26 14:43:47.626961763 +0000
@@ -7,13 +7,14 @@
 ipv6-objs :=	af_inet6.o anycast.o ip6_output.o ip6_input.o addrconf.o \
 		addrlabel.o \
 		route.o ip6_fib.o ipv6_sockglue.o ndisc.o udp.o udplite.o \
-		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o \
+		icmp.o mcast.o reassembly.o tcp_ipv6.o \
 		exthdrs.o datagram.o ip6_flowlabel.o inet6_connection_sock.o
 
 ipv6-offload-$(CONFIG_IP_OFFLOAD) := ip6_offload.o tcpv6_offload.o \
 		udp_offload.o exthdrs_offload.o
 
 ipv6-$(CONFIG_SYSCTL) = sysctl_net_ipv6.o
+ipv6-$(CONFIG_INET_RAW) += raw.o
 ipv6-$(CONFIG_IPV6_MROUTE) += ip6mr.o
 ipv6-$(CONFIG_IP_PING) += ping.o
 
diff -r -N -u linux-3.18.1.orig/net/ipv6/proc.c linux-3.18.1/net/ipv6/proc.c
--- linux-3.18.1.orig/net/ipv6/proc.c	2014-12-26 14:20:32.663017038 +0000
+++ linux-3.18.1/net/ipv6/proc.c	2014-12-26 14:45:36.750957439 +0000
@@ -41,8 +41,10 @@
 		       sock_prot_inuse_get(net, &udpv6_prot));
 	seq_printf(seq, "UDPLITE6: inuse %d\n",
 			sock_prot_inuse_get(net, &udplitev6_prot));
+#ifdef CONFIG_INET_RAW
 	seq_printf(seq, "RAW6: inuse %d\n",
 		       sock_prot_inuse_get(net, &rawv6_prot));
+#endif
 	seq_printf(seq, "FRAG6: inuse %u memory %u\n", !!frag_mem, frag_mem);
 	return 0;
 }
