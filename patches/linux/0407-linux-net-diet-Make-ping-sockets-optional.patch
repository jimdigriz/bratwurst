diff -u -r -N linux-4.0.4.orig/include/net/ping.h linux-4.0.4/include/net/ping.h
--- linux-4.0.4.orig/include/net/ping.h	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/include/net/ping.h	2015-06-07 16:43:39.689381756 +0100
@@ -71,7 +71,6 @@
 int  ping_init_sock(struct sock *sk);
 void ping_close(struct sock *sk, long timeout);
 int  ping_bind(struct sock *sk, struct sockaddr *uaddr, int addr_len);
-void ping_err(struct sk_buff *skb, int offset, u32 info);
 int  ping_getfrag(void *from, char *to, int offset, int fraglen, int odd,
 		  struct sk_buff *);
 
@@ -82,7 +81,6 @@
 int  ping_v6_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,
 		     size_t len);
 int  ping_queue_rcv_skb(struct sock *sk, struct sk_buff *skb);
-bool ping_rcv(struct sk_buff *skb);
 
 #ifdef CONFIG_PROC_FS
 struct ping_seq_afinfo {
@@ -100,12 +98,21 @@
 int ping_proc_register(struct net *net, struct ping_seq_afinfo *afinfo);
 void ping_proc_unregister(struct net *net, struct ping_seq_afinfo *afinfo);
 
-int __init ping_proc_init(void);
-void ping_proc_exit(void);
 #endif
 
+#ifdef CONFIG_IP_PING
+bool ping_rcv(struct sk_buff *skb);
+void ping_err(struct sk_buff *skb, int offset, u32 info);
 void __init ping_init(void);
 int  __init pingv6_init(void);
 void pingv6_exit(void);
+#else
+static inline void ping_init(void) {}
+static inline int pingv6_init(void) { return 0; }
+static inline void pingv6_exit(void) { }
+static inline void ping_err(struct sk_buff *skb, int offset, u32 info) {}
+static inline bool ping_rcv(struct sk_buff *skb) {}
+#endif
+
 
 #endif /* _PING_H */
diff -u -r -N linux-4.0.4.orig/include/net/transp_v6.h linux-4.0.4/include/net/transp_v6.h
--- linux-4.0.4.orig/include/net/transp_v6.h	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/include/net/transp_v6.h	2015-06-07 16:42:17.385384566 +0100
@@ -19,8 +19,6 @@
 void ipv6_frag_exit(void);
 
 /* transport protocols */
-int pingv6_init(void);
-void pingv6_exit(void);
 int rawv6_init(void);
 void rawv6_exit(void);
 int udpv6_init(void);
diff -u -r -N linux-4.0.4.orig/net/ipv4/af_inet.c linux-4.0.4/net/ipv4/af_inet.c
--- linux-4.0.4.orig/net/ipv4/af_inet.c	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv4/af_inet.c	2015-06-07 16:42:17.393384566 +0100
@@ -1004,7 +1004,7 @@
 		.ops =        &inet_dgram_ops,
 		.flags =      INET_PROTOSW_PERMANENT,
        },
-
+#ifdef CONFIG_IP_PING
        {
 		.type =       SOCK_DGRAM,
 		.protocol =   IPPROTO_ICMP,
@@ -1012,6 +1012,7 @@
 		.ops =        &inet_dgram_ops,
 		.flags =      INET_PROTOSW_REUSE,
        },
+#endif
 
        {
 	       .type =       SOCK_RAW,
@@ -1689,7 +1690,9 @@
 	if (rc)
 		goto out_unregister_udp_proto;
 
+#ifdef CONFIG_IP_PING
 	rc = proto_register(&ping_prot, 1);
+#endif
 	if (rc)
 		goto out_unregister_raw_proto;
 
@@ -1807,15 +1810,11 @@
 		goto out_tcp;
 	if (udp4_proc_init())
 		goto out_udp;
-	if (ping_proc_init())
-		goto out_ping;
 	if (ip_misc_proc_init())
 		goto out_misc;
 out:
 	return rc;
 out_misc:
-	ping_proc_exit();
-out_ping:
 	udp4_proc_exit();
 out_udp:
 	tcp4_proc_exit();
diff -u -r -N linux-4.0.4.orig/net/ipv4/icmp.c linux-4.0.4/net/ipv4/icmp.c
--- linux-4.0.4.orig/net/ipv4/icmp.c	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv4/icmp.c	2015-06-07 16:42:17.393384566 +0100
@@ -1055,6 +1055,7 @@
 		return;
 	}
 
+	/* RED-PEN dead code? the if above will eat all. */
 	if (type == ICMP_DEST_UNREACH && code == ICMP_FRAG_NEEDED)
 		ipv4_update_pmtu(skb, net, info, 0, 0, IPPROTO_ICMP, 0);
 	else if (type == ICMP_REDIRECT)
diff -u -r -N linux-4.0.4.orig/net/ipv4/Kconfig linux-4.0.4/net/ipv4/Kconfig
--- linux-4.0.4.orig/net/ipv4/Kconfig	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv4/Kconfig	2015-06-07 16:42:17.393384566 +0100
@@ -52,6 +52,11 @@
 
 	  If unsure, say N here.
 
+config IP_PING
+	bool "IP: ping sockets"
+	---help---
+	  Enable ping sockets to enable suid-less ping.
+
 config IP_FIB_TRIE_STATS
 	bool "FIB TRIE statistics"
 	depends on IP_ADVANCED_ROUTER
diff -u -r -N linux-4.0.4.orig/net/ipv4/Makefile linux-4.0.4/net/ipv4/Makefile
--- linux-4.0.4.orig/net/ipv4/Makefile	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv4/Makefile	2015-06-07 16:42:17.393384566 +0100
@@ -11,9 +11,10 @@
 	     tcp_offload.o datagram.o raw.o udp.o udplite.o \
 	     udp_offload.o arp.o icmp.o devinet.o af_inet.o igmp.o \
 	     fib_frontend.o fib_semantics.o fib_trie.o \
-	     inet_fragment.o ping.o ip_tunnel_core.o gre_offload.o
+	     inet_fragment.o ip_tunnel_core.o gre_offload.o
 
 obj-$(CONFIG_NET_IP_TUNNEL) += ip_tunnel.o
+obj-$(CONFIG_IP_PING) += ping.o
 obj-$(CONFIG_SYSCTL) += sysctl_net_ipv4.o
 obj-$(CONFIG_PROC_FS) += proc.o
 obj-$(CONFIG_IP_MULTIPLE_TABLES) += fib_rules.o
diff -u -r -N linux-4.0.4.orig/net/ipv4/ping.c linux-4.0.4/net/ipv4/ping.c
--- linux-4.0.4.orig/net/ipv4/ping.c	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv4/ping.c	2015-06-07 16:42:17.393384566 +0100
@@ -1212,6 +1212,9 @@
 	unregister_pernet_subsys(&ping_v4_net_ops);
 }
 
+module_init(ping_proc_init);
+module_exit(ping_proc_init);
+
 #endif
 
 void __init ping_init(void)
diff -u -r -N linux-4.0.4.orig/net/ipv6/af_inet6.c linux-4.0.4/net/ipv6/af_inet6.c
--- linux-4.0.4.orig/net/ipv6/af_inet6.c	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv6/af_inet6.c	2015-06-07 16:42:17.393384566 +0100
@@ -851,16 +851,18 @@
 	if (err)
 		goto out_unregister_udplite_proto;
 
+#ifdef CONFIG_IP_PING
 	err = proto_register(&pingv6_prot, 1);
 	if (err)
-		goto out_unregister_ping_proto;
+		goto out_unregister_raw_proto;
+#endif
 
 	/* We MUST register RAW sockets before we create the ICMP6,
 	 * IGMP6, or NDISC control sockets.
 	 */
 	err = rawv6_init();
 	if (err)
-		goto out_unregister_raw_proto;
+		goto out_unregister_ping_proto;
 
 	/* Register the family here so that the init calls below will
 	 * be able to create sockets. (?? is this dangerous ??)
@@ -1012,8 +1014,10 @@
 out_sock_register_fail:
 	rawv6_exit();
 out_unregister_ping_proto:
+#ifdef CONFIG_IP_PING
 	proto_unregister(&pingv6_prot);
 out_unregister_raw_proto:
+#endif
 	proto_unregister(&rawv6_prot);
 out_unregister_udplite_proto:
 	proto_unregister(&udplitev6_prot);
diff -u -r -N linux-4.0.4.orig/net/ipv6/Kconfig linux-4.0.4/net/ipv6/Kconfig
--- linux-4.0.4.orig/net/ipv6/Kconfig	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv6/Kconfig	2015-06-07 16:42:17.393384566 +0100
@@ -6,6 +6,7 @@
 menuconfig IPV6
 	tristate "The IPv6 protocol"
 	default m
+	select IP_PING
 	---help---
 	  This is complemental support for the IP version 6.
 	  You will still be able to do traditional IPv4 networking as well.
diff -u -r -N linux-4.0.4.orig/net/ipv6/Makefile linux-4.0.4/net/ipv6/Makefile
--- linux-4.0.4.orig/net/ipv6/Makefile	2015-05-17 17:55:21.000000000 +0100
+++ linux-4.0.4/net/ipv6/Makefile	2015-06-07 16:42:17.393384566 +0100
@@ -7,13 +7,14 @@
 ipv6-objs :=	af_inet6.o anycast.o ip6_output.o ip6_input.o addrconf.o \
 		addrlabel.o \
 		route.o ip6_fib.o ipv6_sockglue.o ndisc.o udp.o udplite.o \
-		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o ping.o \
+		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o \
 		exthdrs.o datagram.o ip6_flowlabel.o inet6_connection_sock.o
 
 ipv6-offload :=	ip6_offload.o tcpv6_offload.o udp_offload.o exthdrs_offload.o
 
 ipv6-$(CONFIG_SYSCTL) = sysctl_net_ipv6.o
 ipv6-$(CONFIG_IPV6_MROUTE) += ip6mr.o
+ipv6-$(CONFIG_IP_PING) += ping.o
 
 ipv6-$(CONFIG_XFRM) += xfrm6_policy.o xfrm6_state.o xfrm6_input.o \
 	xfrm6_output.o xfrm6_protocol.o
